diff --git a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.cc.t b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.cc.t
index 69276f5..c63a4b9 100644
--- a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.cc.t
+++ b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.cc.t
@@ -79,20 +79,49 @@ gr_make_@BASE_NAME@ (unsigned interpolation,
     delete d_firs[i];
 }
 
+void @NAME@::set_params(unsigned interp, unsigned decim, const std::vector<@TAP_TYPE@> &taps)
+{
+  gruel::scoped_lock guard(d_mutex);
+
+  int old_interp = interpolation();
+  for (int i = 0; i < old_interp; i++)
+    delete d_firs[i];
+
+  set_relative_rate (1.0 * interp / decim);
+
+  d_interpolation = interp;
+  d_decimation = decim;
+  d_ctr = 0;
+  
+  std::vector<@TAP_TYPE@>	dummy_taps;
+  
+  d_firs.clear();
+  for (unsigned i = 0; i < interp; i++)
+    d_firs.push_back(gr_fir_util::create_@FIR_TYPE@ (dummy_taps));
+
+  set_taps (taps);
+  //install_taps (d_new_taps);	// Do in work so it can return 0
+}
+
 void
 @NAME@::set_taps (const std::vector<@TAP_TYPE@> &taps)
 {
-  d_new_taps = taps;
+  d_new_taps.clear();
+//fprintf(stderr, "Setting taps of length %d\n", taps.size());
+  //d_new_taps = taps;
   d_updated = true;
 
   // round up length to a multiple of the interpolation factor
   int n = taps.size () % interpolation ();
   if (n > 0){
     n = interpolation () - n;
+//fprintf(stderr, "Adding additional taps of length %d\n", n);
     while (n-- > 0)
       d_new_taps.insert(d_new_taps.begin(), 0);
   }
-
+//fprintf(stderr, "Setting taps of length %d\n", taps.size());
+  d_new_taps.insert(d_new_taps.end(), taps.begin(), taps.end());
+//fprintf(stderr, "Setting taps complete: %d\n", d_new_taps.size());
   assert (d_new_taps.size () % interpolation () == 0);
 }
 
@@ -148,6 +177,8 @@ int
 {
   const @I_TYPE@ *in = (const @I_TYPE@ *) input_items[0];
   @O_TYPE@ *out = (@O_TYPE@ *) output_items[0];
+  
+  gruel::scoped_lock guard(d_mutex);
 
   if (d_updated) {
     install_taps (d_new_taps);
diff --git a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.h.t b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.h.t
index 983b350..8b1bf96 100644
--- a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.h.t
+++ b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.h.t
@@ -31,6 +31,8 @@
 
 #include <gr_block.h>
 
+#include <gruel/thread.h>
+
 class @NAME@;
 typedef boost::shared_ptr<@NAME@> @SPTR_NAME@;
 @SPTR_NAME@
@@ -53,6 +55,7 @@ class @NAME@ : public gr_block
   std::vector<@TAP_TYPE@>	d_new_taps;
   bool				d_updated;
   std::vector<@FIR_TYPE@ *> d_firs;
+  gruel::mutex	d_mutex;
 
   friend @SPTR_NAME@ 
   gr_make_@BASE_NAME@ (unsigned interpolation, unsigned decimation, const std::vector<@TAP_TYPE@> &taps);
@@ -75,6 +78,8 @@ class @NAME@ : public gr_block
   unsigned decimation() const { return d_decimation; }
 
   void set_taps (const std::vector<@TAP_TYPE@> &taps);
+  
+  void set_params(unsigned interpolation, unsigned decimation, const std::vector<@TAP_TYPE@> &taps);
 
   void forecast (int noutput_items, gr_vector_int &ninput_items_required);
   int  general_work (int noutput_items,
diff --git a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.i.t b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.i.t
index 1416933..e47c60c 100644
--- a/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.i.t
+++ b/gnuradio-core/src/lib/filter/gr_rational_resampler_base_XXX.i.t
@@ -39,4 +39,6 @@ class @NAME@ : public gr_block
   ~@NAME@ ();
 
   void set_taps (const std::vector<@TAP_TYPE@> &taps);
+
+  void set_params(unsigned interpolation, unsigned decimation, const std::vector<@TAP_TYPE@> &taps);
 };
diff --git a/gnuradio-core/src/python/gnuradio/blks2impl/rational_resampler.py b/gnuradio-core/src/python/gnuradio/blks2impl/rational_resampler.py
index b7de0de..0c3f1a2
--- a/gnuradio-core/src/python/gnuradio/blks2impl/rational_resampler.py
+++ b/gnuradio-core/src/python/gnuradio/blks2impl/rational_resampler.py
@@ -43,7 +43,7 @@ def design_filter(interpolation, decimation, fractional_bw):
     beta = 5.0
     trans_width = 0.5 - fractional_bw
     mid_transition_band = 0.5 - trans_width/2
-
+    #print "Generating rational resampler taps (interp: %d, decim %d, fractional_bw: %f)" % (interpolation, decimation, fractional_bw)
     taps = gr.firdes.low_pass(interpolation,                     # gain
                               1,                                 # Fs
                               mid_transition_band/interpolation, # trans mid point
@@ -51,7 +51,7 @@ def design_filter(interpolation, decimation, fractional_bw):
                               gr.firdes.WIN_KAISER,
                               beta                               # beta
                               )
-
+    #print "Completed rational resampler taps: %d (interp: %d, decim %d, fractional_bw: %f)" % (len(taps), interpolation, decimation, fractional_bw)
     return taps
 
 
@@ -87,6 +87,10 @@ class _rational_resampler_base(gr.hier_block2):
 
         if taps is None and fractional_bw is None:
             fractional_bw = 0.4
+        
+        self.fractional_bw = fractional_bw
+        self._decimation = decimation
+        self._interpolation = interpolation
 
         d = gru.gcd(interpolation, decimation)
         interpolation = interpolation // d
@@ -95,13 +99,32 @@ class _rational_resampler_base(gr.hier_block2):
         if taps is None:
             taps = design_filter(interpolation, decimation, fractional_bw)
 
-        resampler = resampler_base(interpolation, decimation, taps)
-	gr.hier_block2.__init__(self, "rational_resampler",
-				gr.io_signature(1, 1, resampler.input_signature().sizeof_stream_item(0)),
-				gr.io_signature(1, 1, resampler.output_signature().sizeof_stream_item(0)))
-
-	self.connect(self, resampler, self)
-
+        self.resampler = resampler_base(interpolation, decimation, taps)
+        
+        gr.hier_block2.__init__(self, "rational_resampler",
+                    gr.io_signature(1, 1, self.resampler.input_signature().sizeof_stream_item(0)),
+                    gr.io_signature(1, 1, self.resampler.output_signature().sizeof_stream_item(0)))
+
+        self.connect(self, self.resampler, self)
+    def set_decim(self, decim):
+        self.set_params(decim, None)
+    def set_interp(self, interp):
+        self.set_params(None, interp)
+    def set_params(self, decim, interp):
+        if decim is None:
+            decim = self._decimation
+        else:
+            self._decimation = decim
+        if interp is None:
+            interp = self._interpolation
+        else:
+            self._interpolation = interp
+        d = gru.gcd(interp, decim)
+        interp = interp // d
+        decim = decim // d
+        taps = design_filter(interp, decim, self.fractional_bw)
+        print "New filter parameters: decim: %d, interp: %d, taps length: %d" % (decim, interp, len(taps))
+        self.resampler.set_params(interp, decim, taps)
 
 class rational_resampler_fff(_rational_resampler_base):
     def __init__(self, interpolation, decimation, taps=None, fractional_bw=None):
diff --git a/grc/blocks/blks2_rational_resampler_xxx.xml b/grc/blocks/blks2_rational_resampler_xxx.xml
index b92ec8e..b57c10e
--- a/grc/blocks/blks2_rational_resampler_xxx.xml
+++ b/grc/blocks/blks2_rational_resampler_xxx.xml
@@ -23,6 +23,8 @@
 	fractional_bw=None,
 #end if
 )</make>
+	<callback>set_decim($decim)</callback>
+	<callback>set_interp($interp)</callback>
 	<param>
 		<name>Type</name>
 		<key>type</key>
