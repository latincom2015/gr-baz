diff --git a/gnuradio-core/src/python/gnuradio/blks2impl/d8psk.py b/gnuradio-core/src/python/gnuradio/blks2impl/d8psk.py
index 67cf9f5..9457f49
--- a/gnuradio-core/src/python/gnuradio/blks2impl/d8psk.py
+++ b/gnuradio-core/src/python/gnuradio/blks2impl/d8psk.py
@@ -35,6 +35,7 @@ from pprint import pprint
 _def_samples_per_symbol = 3
 _def_excess_bw = 0.35
 _def_gray_code = True
+_def_diff_code = True
 _def_verbose = False
 _def_log = False
 
@@ -55,37 +56,39 @@ class d8psk_mod(gr.hier_block2):
                  excess_bw=_def_excess_bw,
                  gray_code=_def_gray_code,
                  verbose=_def_verbose,
-                 log=_def_log):
+                 log=_def_log,
+                 diff_code=_def_diff_code):
+        """
+        Hierarchical block for RRC-filtered QPSK modulation.
+    
+        The input is a byte stream (unsigned char) and the
+        output is the complex modulated signal at baseband.
+    
+        @param samples_per_symbol: samples per symbol >= 2
+        @type samples_per_symbol: integer
+        @param excess_bw: Root-raised cosine filter excess bandwidth
+        @type excess_bw: float
+            @param gray_code: Tell modulator to Gray code the bits
+            @type gray_code: bool
+            @param verbose: Print information about modulator?
+            @type verbose: bool
+            @param debug: Print modualtion data to files?
+            @type debug: bool
         """
-	Hierarchical block for RRC-filtered QPSK modulation.
-
-	The input is a byte stream (unsigned char) and the
-	output is the complex modulated signal at baseband.
 
-	@param samples_per_symbol: samples per symbol >= 2
-	@type samples_per_symbol: integer
-	@param excess_bw: Root-raised cosine filter excess bandwidth
-	@type excess_bw: float
-        @param gray_code: Tell modulator to Gray code the bits
-        @type gray_code: bool
-        @param verbose: Print information about modulator?
-        @type verbose: bool
-        @param debug: Print modualtion data to files?
-        @type debug: bool
-	"""
+        gr.hier_block2.__init__(self, "d8psk_mod",
+                    gr.io_signature(1, 1, gr.sizeof_char),       # Input signature
+                    gr.io_signature(1, 1, gr.sizeof_gr_complex)) # Output signature
 
-	gr.hier_block2.__init__(self, "d8psk_mod",
-				gr.io_signature(1, 1, gr.sizeof_char),       # Input signature
-				gr.io_signature(1, 1, gr.sizeof_gr_complex)) # Output signature
-				
         self._samples_per_symbol = samples_per_symbol
         self._excess_bw = excess_bw
         self._gray_code = gray_code
+        self._diff_code = diff_code
 
         if not isinstance(samples_per_symbol, int) or samples_per_symbol < 2:
             raise TypeError, ("sbp must be an integer >= 2, is %d" % samples_per_symbol)
 
-	ntaps = 11 * samples_per_symbol
+        ntaps = 11 * samples_per_symbol
  
         arity = pow(2,self.bits_per_symbol())
 
@@ -97,22 +100,24 @@ class d8psk_mod(gr.hier_block2):
             self.symbol_mapper = gr.map_bb(psk.binary_to_gray[arity])
         else:
             self.symbol_mapper = gr.map_bb(psk.binary_to_ungray[arity])
-            
-        self.diffenc = gr.diff_encoder_bb(arity)
+        
+        self.diffenc = None
+        if diff_code:
+            self.diffenc = gr.diff_encoder_bb(arity)
 
         rot = 1
         rotated_const = map(lambda pt: pt * rot, psk.constellation[arity])
         self.chunks2symbols = gr.chunks_to_symbols_bc(rotated_const)
 
         # pulse shaping filter
-	self.rrc_taps = gr.firdes.root_raised_cosine(
-	    self._samples_per_symbol, # gain  (sps since we're interpolating by sps)
+        self.rrc_taps = gr.firdes.root_raised_cosine(
+           self._samples_per_symbol, # gain  (sps since we're interpolating by sps)
             self._samples_per_symbol, # sampling rate
             1.0,		      # symbol rate
             self._excess_bw,          # excess bandwidth (roll-off factor)
             ntaps)
 
-	self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol, self.rrc_taps)
+        self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol, self.rrc_taps)
 
         if verbose:
             self._print_verbage()
@@ -120,9 +125,13 @@ class d8psk_mod(gr.hier_block2):
         if log:
             self._setup_logging()
             
-	# Connect & Initialize base class
-        self.connect(self, self.bytes2chunks, self.symbol_mapper, self.diffenc,
-            	     self.chunks2symbols, self.rrc_filter, self)
+        # Connect & Initialize base class
+        self.connect(self, self.bytes2chunks, self.symbol_mapper)
+        if self.diffenc:
+            self.connect(self.symbol_mapper, self.diffenc, self.chunks2symbols)
+        else:
+            self.connect(self.symbol_mapper, self.chunks2symbols)
+        self.connect(self.chunks2symbols, self.rrc_filter, self)
 
     def samples_per_symbol(self):
         return self._samples_per_symbol
@@ -135,6 +144,7 @@ class d8psk_mod(gr.hier_block2):
         print "bits per symbol = %d" % self.bits_per_symbol()
         print "Gray code = %s" % self._gray_code
         print "RS roll-off factor = %f" % self._excess_bw
+        print "Differential encode: %s" % self._diff_code
 
     def _setup_logging(self):
         print "Modulation logging turned on."
diff --git a/gnuradio-core/src/python/gnuradio/blks2impl/dbpsk.py b/gnuradio-core/src/python/gnuradio/blks2impl/dbpsk.py
index 55e4890..4b1cd13
--- a/gnuradio-core/src/python/gnuradio/blks2impl/dbpsk.py
+++ b/gnuradio-core/src/python/gnuradio/blks2impl/dbpsk.py
@@ -35,6 +35,7 @@ from pprint import pprint
 _def_samples_per_symbol = 2
 _def_excess_bw = 0.35
 _def_gray_code = True
+_def_diff_code = True
 _def_verbose = False
 _def_log = False
 
@@ -55,7 +56,8 @@ class dbpsk_mod(gr.hier_block2):
                  excess_bw=_def_excess_bw,
                  gray_code=_def_gray_code,
                  verbose=_def_verbose,
-                 log=_def_log):
+                 log=_def_log,
+				 diff_code=_def_diff_code):
         """
 	Hierarchical block for RRC-filtered differential BPSK modulation.
 
@@ -81,11 +83,12 @@ class dbpsk_mod(gr.hier_block2):
         self._samples_per_symbol = samples_per_symbol
         self._excess_bw = excess_bw
         self._gray_code = gray_code
+        self._diff_code = diff_code
 
         if not isinstance(self._samples_per_symbol, int) or self._samples_per_symbol < 2:
             raise TypeError, ("sbp must be an integer >= 2, is %d" % self._samples_per_symbol)
         
-	ntaps = 11 * self._samples_per_symbol
+        ntaps = 11 * self._samples_per_symbol
 
         arity = pow(2,self.bits_per_symbol())
         
@@ -98,24 +101,30 @@ class dbpsk_mod(gr.hier_block2):
         else:
             self.symbol_mapper = gr.map_bb(psk.binary_to_ungray[arity])
 
-        self.diffenc = gr.diff_encoder_bb(arity)
+        self.diffenc = None
+        if diff_code:
+            self.diffenc = gr.diff_encoder_bb(arity)
 
         self.chunks2symbols = gr.chunks_to_symbols_bc(psk.constellation[arity])
 
         # pulse shaping filter
-	self.rrc_taps = gr.firdes.root_raised_cosine(
-	    self._samples_per_symbol,   # gain (samples_per_symbol since we're
+        self.rrc_taps = gr.firdes.root_raised_cosine(
+            self._samples_per_symbol,   # gain (samples_per_symbol since we're
                                         # interpolating by samples_per_symbol)
-	    self._samples_per_symbol,   # sampling rate
-	    1.0,		        # symbol rate
-	    self._excess_bw,            # excess bandwidth (roll-off factor)
+            self._samples_per_symbol,   # sampling rate
+            1.0,		        # symbol rate
+            self._excess_bw,            # excess bandwidth (roll-off factor)
             ntaps)
-	self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol,
+        self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol,
                                                    self.rrc_taps)
 
-	# Connect
-        self.connect(self, self.bytes2chunks, self.symbol_mapper, self.diffenc,
-                     self.chunks2symbols, self.rrc_filter, self)
+        # Connect
+        self.connect(self, self.bytes2chunks, self.symbol_mapper)
+        if self.diffenc:
+            self.connect(self.symbol_mapper, self.diffenc, self.chunks2symbols)
+        else:
+            self.connect(self.symbol_mapper, self.chunks2symbols)
+        self.connect(self.chunks2symbols, self.rrc_filter, self)
 
         if verbose:
             self._print_verbage()
@@ -156,6 +165,7 @@ class dbpsk_mod(gr.hier_block2):
         print "bits per symbol:     %d" % self.bits_per_symbol()
         print "Gray code:           %s" % self._gray_code
         print "RRC roll-off factor: %.2f" % self._excess_bw
+        print "Differential encode: %s" % self._diff_code
 
     def _setup_logging(self):
         print "Modulation logging turned on."
diff --git a/gnuradio-core/src/python/gnuradio/blks2impl/dqpsk.py b/gnuradio-core/src/python/gnuradio/blks2impl/dqpsk.py
index 42d5341..a171260
--- a/gnuradio-core/src/python/gnuradio/blks2impl/dqpsk.py
+++ b/gnuradio-core/src/python/gnuradio/blks2impl/dqpsk.py
@@ -35,6 +35,7 @@ from pprint import pprint
 _def_samples_per_symbol = 2
 _def_excess_bw = 0.35
 _def_gray_code = True
+_def_diff_code = True
 _def_verbose = False
 _def_log = False
 
@@ -55,7 +56,8 @@ class dqpsk_mod(gr.hier_block2):
                  excess_bw=_def_excess_bw,
                  gray_code=_def_gray_code,
                  verbose=_def_verbose,
-                 log=_def_log):
+                 log=_def_log,
+				 diff_code=_def_diff_code):
         """
 	Hierarchical block for RRC-filtered QPSK modulation.
 
@@ -81,12 +83,13 @@ class dqpsk_mod(gr.hier_block2):
         self._samples_per_symbol = samples_per_symbol
         self._excess_bw = excess_bw
         self._gray_code = gray_code
+        self._diff_code = diff_code
 
         if not isinstance(samples_per_symbol, int) or samples_per_symbol < 2:
             raise TypeError, ("sbp must be an integer >= 2, is %d" % samples_per_symbol)
 
-	ntaps = 11 * samples_per_symbol
- 
+    	ntaps = 11 * samples_per_symbol
+
         arity = pow(2,self.bits_per_symbol())
 
         # turn bytes into k-bit vectors
@@ -97,32 +100,38 @@ class dqpsk_mod(gr.hier_block2):
             self.symbol_mapper = gr.map_bb(psk.binary_to_gray[arity])
         else:
             self.symbol_mapper = gr.map_bb(psk.binary_to_ungray[arity])
-            
-        self.diffenc = gr.diff_encoder_bb(arity)
+        
+        self.diffenc = None
+        if diff_code:
+            self.diffenc = gr.diff_encoder_bb(arity)
 
         rot = .707 + .707j
         rotated_const = map(lambda pt: pt * rot, psk.constellation[arity])
         self.chunks2symbols = gr.chunks_to_symbols_bc(rotated_const)
 
         # pulse shaping filter
-	self.rrc_taps = gr.firdes.root_raised_cosine(
-	    self._samples_per_symbol, # gain  (sps since we're interpolating by sps)
+        self.rrc_taps = gr.firdes.root_raised_cosine(
+            self._samples_per_symbol, # gain  (sps since we're interpolating by sps)
             self._samples_per_symbol, # sampling rate
             1.0,		      # symbol rate
             self._excess_bw,          # excess bandwidth (roll-off factor)
             ntaps)
 
-	self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol, self.rrc_taps)
+        self.rrc_filter = gr.interp_fir_filter_ccf(self._samples_per_symbol, self.rrc_taps)
 
         if verbose:
             self._print_verbage()
         
         if log:
             self._setup_logging()
-            
-	# Connect & Initialize base class
-        self.connect(self, self.bytes2chunks, self.symbol_mapper, self.diffenc,
-                     self.chunks2symbols, self.rrc_filter, self)
+        
+        # Connect & Initialize base class
+        self.connect(self, self.bytes2chunks, self.symbol_mapper)
+        if self.diffenc:
+            self.connect(self.symbol_mapper, self.diffenc, self.chunks2symbols)
+        else:
+            self.connect(self.symbol_mapper, self.chunks2symbols)
+        self.connect(self.chunks2symbols, self.rrc_filter, self)
 
     def samples_per_symbol(self):
         return self._samples_per_symbol
@@ -136,6 +145,7 @@ class dqpsk_mod(gr.hier_block2):
         print "bits per symbol:     %d" % self.bits_per_symbol()
         print "Gray code:           %s" % self._gray_code
         print "RRS roll-off factor: %f" % self._excess_bw
+        print "Differential encode: %s" % self._diff_code
 
     def _setup_logging(self):
         print "Modulation logging turned on."
diff --git a/grc/blocks/blks2_dxpsk_mod.xml b/grc/blocks/blks2_dxpsk_mod.xml
index 77505d8..fb8f3c7
--- a/grc/blocks/blks2_dxpsk_mod.xml
+++ b/grc/blocks/blks2_dxpsk_mod.xml
@@ -14,6 +14,7 @@
 	gray_code=$gray_code,
 	verbose=$verbose,
 	log=$log,
+	diff_code=$diff_code,
 )</make>
 	<param>
 		<name>Type</name>
@@ -58,6 +59,23 @@
 			<key>False</key>
 		</option>
 	</param>
+	
+	<param>
+		<name>Differential Encode</name>
+		<key>diff_code</key>
+		<value>True</value>
+		<type>bool</type>
+		<hide>#if str($diff_code) == 'True' then 'part' else 'none'#</hide>
+		<option>
+			<name>Yes</name>
+			<key>True</key>
+		</option>
+		<option>
+			<name>No</name>
+			<key>False</key>
+		</option>
+	</param>
+	
 	<param>
 		<name>Verbose</name>
 		<key>verbose</key>
